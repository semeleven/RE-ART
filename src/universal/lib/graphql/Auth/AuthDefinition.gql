type SignResponse {
    success: Boolean!
    message: String # error description
    data: SignData # data is empty if error occurs
}

type SignData {
    sign: Token!
    user: UserData!
}

type Token {
    token: String!
}

type Sign {
    token: String!
    user: UserData
}

type UserData {
    username: String!
    email: String!
    ID: Int!
}

input SignInInput {
    username: String
    email: String
    password: String!
}

input SignUpInput {
    username: String!
    email: String!
    password: String!
}

extend type Mutation {
    SignIn(input: SignInInput!): SignResponse!
    SignUp(input: SignUpInput!): SignResponse!
}